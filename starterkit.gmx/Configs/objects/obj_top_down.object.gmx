<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// sets the variables used by this object
movespeed = 4;  // movement speed
hsp = 0;        // horizontal speed
vsp = 0;        // vertical speed
dir = 0;        // movement direction
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// local variables, only accessed in this block of code
var point_h, point_v;

// sets the previous variables to either positive or negative 1
point_h = input.key_right - input.key_left;
point_v = input.key_down - input.key_up;

// sets your direction to face the pointed direction, using point_direction()
dir = point_direction(x, y, x + sign(point_h), y + sign(point_v));

// uses lengthdir_x and lengthdir_y to determine how much your player moves in a certain direction
// diagonals move at the same speed as horizontal and vertical
hsp = lengthdir_x(movespeed, dir) * (input.key_right | input.key_left);
vsp = lengthdir_y(movespeed, dir) * (input.key_down | input.key_up);

// same collision code as platformer object
if(place_meeting(x + hsp, y, obj_wall)){
    while(!place_meeting(x + sign(hsp), y, obj_wall)){
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

if(place_meeting(x, y + vsp, obj_wall)){
    while(!place_meeting(x, y + sign(vsp), obj_wall)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

// sets the image_angle to be the same direction as the movement direction.
if(hsp != 0 || vsp != 0){
    image_angle = dir;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
